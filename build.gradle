/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */

plugins {
    // java application
    id "application"
    // jar bundling
    id "com.github.johnrengelman.shadow" version "7.1.2"
    // code coverage
    id "jacoco"
    //
    id "com.kageiit.jacobo" version "2.1.0"
    // static code analysis
    id "pmd"
    // git clone, etc.
    id "org.ajoberstar.grgit" version "2.3.0"
    // google java format
    id "com.github.sherter.google-java-format" version "0.9"
    // manage micronaut dependencies
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    // support publishing to maven repositories
    id 'maven-publish'
}

sourceCompatibility = '1.11'
targetCompatibility = '1.11'
version = '0.9.0'
group = "gov.usgs"

repositories {
  mavenCentral()
}

configurations {
  codacy
}

dependencyManagement {
    imports {
        mavenBom "io.micronaut:micronaut-bom:3.4.4"
    }
}

dependencies {
    codacy "com.codacy:codacy-coverage-reporter:4.0+"

    // micronaut
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    annotationProcessor("io.micronaut.openapi:micronaut-openapi:3.2.0")
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.swagger.core.v3:swagger-annotations"
    implementation "ch.qos.logback:logback-classic:1.2.9"

    // com.googlecode.json.simple
    implementation "com.googlecode.json-simple:json-simple:1.1.1"
    // org.apache.commons.math3
    implementation "org.apache.commons:commons-math3:3.6.1"
    // gov.nist.math.jama
    implementation "gov.nist.math:jama:1.0.3"

    // Use JUnit 5
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"

    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("io.micronaut.test:micronaut-test-junit5:3.0.5")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.7.2")
}

// method to add/update an external project from git and add it to the
// sourceset
ext.addExternalProject = { path, url, branch, srcDir ->
  File projDir = new File("$path")

  // cleanup local copy if it exists
  // (we do this because grgit.pull doesn't seem to update
  // local files, yes this is slow)
  if(projDir.exists()) {
    projDir.deleteDir()
  }

  // clone external project
  logger.quiet('Cloning {}', projDir)
  grgit.clone(dir: projDir, uri: url, refToCheckout: branch)

  // add to sourceset
  sourceSets {
    main {
      java {
          // grab the main subdir of src to avoid compiling tests
          srcDirs "$path/$srcDir/main"
      }
    }
  }
}

// mainClassName = "gov.usgs.traveltimeservice.Application"
mainClassName = "gov.usgs.traveltime.TravelTimeMain"

// Note: To reformat all java code (not in lib) manually into the 
// google java style, run ./gradlew goJF
googleJavaFormat {
  exclude 'lib/**'
}

// always format to google style prior to the build
compileJava.dependsOn 'googleJavaFormat'

// Added Google java style check (shouldn't find anything)
project.tasks.check.dependsOn(verifyGoogleJavaFormat)

// coverage reports
jacoco {
  toolVersion "0.8.7"
}
jacocoTestReport {
  reports {
    // Note I think these will need to be changed 
    // to .required = true when/if we move to 
    // gradle 8
    html.enabled = true
    xml.enabled = true
  }

  // exclude librarys
  afterEvaluate {
        getClassDirectories().from(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "gov/usgs/processingformats/**"
            ])
        }))
    }
}
project.tasks.check.dependsOn jacocoTestReport

pmd {
  toolVersion = "6.29.0"
  ruleSets = [
    file("pmd-ruleset.xml")
  ]
}

test {
  useJUnitPlatform()
  filter {
    includeTestsMatching "*Test"
  }
}

// clone/update external libs from github, at least until they're available in
// maven
task cloneExternalProjects {
  description "Clones/Updates external project(s)."

  doFirst {
    // earthquake-processing-formats
    addExternalProject("$projectDir/lib/earthquake-processing-formats",
      "https://github.com/usgs/earthquake-processing-formats.git", "master", "java/src")
    // addExternalProject("$projectDir/lib/earthquake-processing-formats",
    //  "https://github.com/jpatton-USGS/earthquake-processing-formats.git", "tt-refactor", "java/src")
  }
}

// method to copy required model files
task copyModelFiles(type: Copy) {
  description 'Copies required model files to build directory.'
  // dependsOn 'compileJava'
  from "models"
  exclude "README.txt"
  into "$buildDir/models"
}

// show compile warnings
tasks.withType(JavaCompile) {
  options.compilerArgs.add("-parameters")
  options.encoding = "UTF-8"
  options.setDeprecation(true);
  options.setWarnings(true);
}

// make sure we always update the external projects and copy models prior to
// complile
defaultTasks "cloneExternalProjects", "copyModelFiles"
copyModelFiles.dependsOn "cloneExternalProjects"
compileJava.dependsOn "cloneExternalProjects", "copyModelFiles"

shadowJar {
  mergeServiceFiles()
}

// create javadocs
javadoc {
  exclude "**/gov/usgs/processingformats/**"
  if(JavaVersion.current() != JavaVersion.VERSION_1_8) {
    options.addBooleanOption('html5', true)
  }
}

// convert jacoco to cobertura
import com.kageiit.jacobo.JacoboTask
tasks.create("jacobo", JacoboTask, {
    it.jacocoReport = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    it.coberturaReport = file("${project.buildDir}/reports/cobertura/cobertura.xml")
    it.srcDirs = sourceSets.main.java.srcDirs
}).dependsOn(jacocoTestReport)
project.tasks.check.dependsOn jacobo

// publish to our maven package repository
// note this will only work from within the pipeline
publishing {
    publications {
        library(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
          // The general NEIC package registry
          url "https://code.usgs.gov/api/v4/projects/8197/packages/maven"
          name "GitLab"
          credentials(HttpHeaderCredentials) {
              name = 'Job-Token'
              value = System.getenv("CI_JOB_TOKEN")
          }
          authentication {
              header(HttpHeaderAuthentication)
          }
        }
    }
}
